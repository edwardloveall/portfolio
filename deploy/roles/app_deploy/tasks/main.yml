---
- name: Remove old github known_hosts
  ansible.builtin.command: "ssh-keygen -R github.com"
  changed_when: true

- name: Add github key to known_hosts
  ansible.builtin.shell: "ssh-keyscan -H github.com >> {{ ansible_env.HOME }}/.ssh/known_hosts"
  changed_when: true

- name: Download portfolio
  ansible.builtin.git:
    repo: "{{ git_url }}"
    dest: "{{ location }}"
    version: main

- name: Install language dependencies
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  with_items:
    - autoconf
    - bison
    - build-essential
    - libssl-dev
    - libyaml-dev
    - libreadline6-dev
    - zlib1g-dev
    - libncurses5-dev
    - libffi-dev
    - libgdbm6
    - libgdbm-dev
    - libdb-dev
    - libpq-dev
    - curl
  become: true

- name: asdf install
  ansible.builtin.shell: >
    set -o pipefail &&
    asdf install | grep -v "already installed"
  args:
    chdir: "{{ location }}"
    executable: /bin/zsh
  register: asdf_results
  changed_when: asdf_results.stdout_lines | count > 0
  failed_when: false

- name: Fetch bundle config
  ansible.builtin.command: bundle config list
  args:
    chdir: "{{ location }}"
  register: bundler_config
  changed_when: false

- name: Configure bundler for deployment
  ansible.builtin.command: bundle config set --local deployment 'true'
  args:
    chdir: "{{ location }}"
  when: bundler_config.stdout.find('deployment') == -1

- name: Configure bundler to only use production gems
  ansible.builtin.command: bundle config set --local without 'development test'
  args:
    chdir: "{{ location }}"
  when: bundler_config.stdout.find('without') == -1

- name: Install gems
  ansible.builtin.command: bundle
  args:
    chdir: "{{ location }}"
  register: bundle_install
  changed_when: bundle_install.stdout.find("Resolving dependencies") == -1

- name: Prepare database
  ansible.builtin.command: "rails db:prepare"
  args:
    chdir: "{{ location }}"
  changed_when: true

- name: Install node packages
  community.general.yarn:
    path: "{{ location }}"

- name: Compile assets
  ansible.builtin.command: "rails assets:precompile"
  args:
    chdir: "{{ location }}"
  changed_when: true

- name: Create shared folders
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "755"
  with_items:
    - "{{ location }}/shared"
    - "{{ location }}/shared/pids"
    - "{{ location }}/shared/sockets"

- name: Install portfolio systemd unit file
  ansible.builtin.template:
    src: systemd.service.j2
    dest: /etc/systemd/system/portfolio.service
    mode: 0644
  become: true

- name: Start rails server
  ansible.builtin.systemd:
    state: restarted
    name: portfolio
    enabled: true
    daemon_reload: true
  become: true

- name: Restart nginx
  ansible.builtin.service:
    name: nginx
    state: restarted
  become: true

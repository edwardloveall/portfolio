#!/usr/bin/env ruby

require "open3"

GemUpdate = Data.define(:name, :current, :latest, :in_gem_file)
FakeStatus = Data.define(:success?, :code) do
  def to_i
    code.to_i
  end
end
INDENT_CHAR = " "
DRY_RUN = ARGV[0] == "--dry-run"

class BundlerClient
  def self.outdated_gems
    output, _status = Open3.capture2("bundle outdated --only-explicit")
    if output.include?("Bundle up to date!")
      puts "Bundle up to date!"
      exit 0
    end
    index = output.lines.find_index { |line| line.start_with?("Gem") }
    output.lines[index+1..].map do |line|
      name, current_version, latest_version, operator, explicit_version = line.split(" ").first(5)
      in_gem_file = "#{operator} #{explicit_version}"
      GemUpdate.new(name, current_version, latest_version, in_gem_file)
    end
  end

  def self.update(gem_update, dry_run = false)
    args = %W(update #{gem_update.name})
    if dry_run
      status = FakeStatus.new(success?: true, code: 0)
    else
      _out, status = Open3.capture2("bundle", *args)
    end
    status
  end
end

class GitClient
  def self.stage_gem_lockfile(dry_run = false)
    args = %W(stage Gemfile.lock)
    if dry_run
      status = FakeStatus.new(success?: true, code: 0)
    else
      _out, status = Open3.capture2("git", *args)
    end
    status
  end

  def self.commit_update(update, dry_run = false)
    message = "Update #{update.name} from #{update.current} to #{update.latest}"
    args = %W(commit -m #{message})
    if dry_run
      status = FakeStatus.new(success?: true, code: 0)
    else
      _out, status = Open3.capture2("git", *args)
    end
    status
  end
end

def indent(n)
  (INDENT_CHAR * n)
end

gem_updates = BundlerClient.outdated_gems
gem_updates.each do |update|
  puts "Updating #{update.name} from #{update.current} to #{update.latest}"
  status = BundlerClient.update(update, DRY_RUN)
  if status.success?
    puts indent(2) + "#{update.name} update successful"
  else
    puts indent(2) + "something went wrong when updating #{update.name}"
    exit(status.to_i)
  end

  GitClient.stage_gem_lockfile(DRY_RUN)
  status = GitClient.commit_update(update, DRY_RUN)
  if status.success?
    puts indent(2) + "#{update.name} commit successful"
  else
    puts indent(2) + "something went wrong when committing #{update.name}"
    exit(status.to_i)
  end
end
